type Enterprise implements Definable & Describable {
    id: ID!
    officialId: String
    key: String
    name: String!
    description: String
    producer: Producer                      # /producer
    shop: Shop                              # /shop
    group: EnterpriseGroup                  # /group
    members: [EnterpriseUser]             # /members
    mainContactPoint: ContactPoint
    address: PostalAddress!
    images: [Image]
    socialNetworks: [SocialNetworkContact]
    about: String
    hidden: Boolean
}

type EnterpriseUser implements Ownable {
    enterpriseId: ID!
    userId: ID!
    role: String
    user: User
}

type User {
    id: ID
    firstName: String
    lastName: String
    email: String
}

type Producer implements Ownable {
    enterpriseId: ID!
    products: [Product]
    productModels: [ProductModel]
    mainCatalog: Catalog
}

type Shop implements Ownable {
    enterpriseId: ID!
    checkoutCatalog: Catalog # /shop/catalogs/checkout/items
    backOfficeCatalog: Catalog # /shop/catalogs/backoffice/items
    checkoutShopFront: CheckoutShopfront
    customers: [Customer]
    customerOrders: [Order]
    orderCycles: [OrderCycle]
    customerInvoices: [Invoice]
    customerPayments: [Payment]
    customerSubscriptions: [Subscription]
    supplierCatalogs: [Catalog] # /shop/suppliers/catalogs/items
    tagRules: [ShopTagRule]
}

type Customer implements Definable & Ownable & Taggable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    tags: [String]
    shippingAddress: PostalAddress
    billingAddress: PostalAddress
}

type EnterpriseGroup {
    members: [EnterpriseGroupMember]
}

type EnterpriseGroupMember {
    enterpriseId: String!
}

type MarketPlace implements Definable {
    id: ID!
    key: String
    name: String!
    producers: [Producer]
    shops: [Shop]
    groups: [EnterpriseGroup]
    customers: [MarketplaceCustomer]
}

type MarketplaceCustomer {
    userId: ID
    user: User
    shippingAddress: PostalAddress
    billingAddress: PostalAddress
    orders: [Order]
    invoices: [Invoice]
    payments: [Payment]
    subscriptions: [Subscription]
}


type Product implements Definable & Ownable {    
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    model: ProductModel
    offers: [Offer]
}

type ProductModel implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    products: [Product]
}

type Catalog implements Ownable { # implements Definable & Ownable
    id: ID!
    key: String
    producerId: ID
    shopId: ID
    enterpriseId: ID!
    items: [CatalogItem]
    shipmentSpecifications: [ShipmentSpecification]
    paymentSpecifications: [PaymentSpecification]
    fees: [Fee]
}

type CatalogItem implements Definable & Ownable & Hidable {
    id: ID!
    enterpriseId: ID!
    catalogId: ID!
    key: String
    name: String!
    type: String # default is product, product_model exists as well
    description: String
    images: [Image]
    product: Product!
    mainOffer: Offer
    inventoryItem: InventoryItem
    hidden: Boolean!
    showForCustomerCategories: [String]
    hideForCustomerCategories: [String]
}

type Offer {
    id: ID!
    productId: String
    productModelId: String
    price: Money
}

type FeeModel implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    calculatorKey: String
    calculatorValue: Float
}

type Fee {
    id: ID!
    catalogId: ID
    model: FeeModel
}

# TODO each calculator has its own type, use any of, type is the discriminator

type InventoryItem {
    catalogItemId: ID!
    quantity: Quantity
}

type Order implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    status: String!
    date: Date
    buyer: TransactionParty
    seller: TransactionParty
    items: [OrderItem]
    invoice: Invoice
    payment: Payment
    shipmentStatus: String
    shipmentMethod: ShipmentMethod
    paymentMethod: PaymentMethod
}

type OrderItem {
    product: Product
    catalogItem: CatalogItem
    quantity: Quantity
    offer: Offer
    fees: [Fee]
}

type OrderCycle implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    status: String!
    beginsAt: Date
    endsAt: Date
    inCatalogs: [Catalog]
    outCatalogs: [Catalog]
    schedules: [OrderCycleSchedule]
    orders: [Order]
}

# TODO how to handle order cycle schedules ...
type OrderCycleSchedule implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
}

type Subscription {
    id: ID!
    enterpriseId: ID!
    shopId: ID!
    customerId: ID!
    schedule: OrderCycleSchedule
    status: String!
    beginsAt: Date!
    endsAt: Date
    shipmentMethod: ShipmentMethod
    paymentMethod: PaymentMethod
    shippingAddress: PostalAddress
    billingAddress: PostalAddress
    items: [SubscriptionItem]
}

type SubscriptionItem {
    product: Product
    quantity: Quantity
}

type ShipmentMethod implements Definable & Ownable & Taggable {
    id: ID!
    key: String
    name: String!
    description: String
    enterpriseId: ID!
    active: Boolean!
    environment: String
    fee: Fee
    tags: [String]
}

type Invoice implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    enterpriseId: ID!
    status: String!
    buyer: TransactionParty
    seller: TransactionParty
    items: [InvoiceItem]
    orderId: ID
}

type InvoiceItem {
    product: Product
    catalogItem: CatalogItem
    quantity: Quantity
    unitPrice: Money
    fees: [Fee]
    price: Money
}

type PaymentMethod implements Definable & Ownable {
    id: ID!
    key: String
    name: String!
    description: String
    enterpriseId: ID!
    active: Boolean!
    environment: String
    fee: Fee
    tags: [String]
}

type Payment implements Ownable {
    id: ID!
    enterpriseId: ID!
    method: PaymentMethod
    status: String!
    invoiceId: ID
    orderId: ID
    sender: TransactionParty
    receiver: TransactionParty
    reference: String
    amount: Money
}

type ContactPoint {
    name: String
    email: String
    telephone: String
    url: String
}

type PostalAddress {
    street: String!
    locality: String!
    postCode: String!
    countryCode: String!
    latitude: Float!
    longitude: Float!
}

type Image {
    type: String # logo, promo
    url: String
}

type SocialNetworkContact {
    type: String
    url: String
}

type Money {
    value: Float
    currency: Currency
}

type Currency {
    code: String
    symbol: String
    name: String
}

type Quantity {
    value: Float
    unit: Unit
}

type Unit {
    code: String
    symbol: String
    name: String
}

type CheckoutShopfront {
    message: String
    closedMessage: String
    visibility: String
    orderCycleSortby: String
    orderModificationEnabled: Boolean
    checkoutRegistrationRequired: Boolean
    subscriptionsEnabled: Boolean
    supplierReportCustomerAnonymisation: Boolean
}

type ShopTagRule {
    type: String
    customerCategoryTag: String
    tag: String
}

type TransactionParty {
    customerId: ID
    enterpriseId: ID
    shopId: ID
    name: String
    officialId: String
    bankAccountNumber: String
    address: PostalAddress
    shippingAddress: PostalAddress
    billingAddress: PostalAddress
}

type ShipmentSpecification implements Hidable {
    method: ShipmentMethod
    hidden: Boolean!
    showForCustomerCategories: [String]
    hideForCustomerCategories: [String]
}

type PaymentSpecification implements Hidable {
    method: PaymentMethod
    hidden: Boolean!
    showForCustomerCategories: [String]
    hideForCustomerCategories: [String]
}

type PaymentProvider {
    key: String!
    name: String!
}

interface Definable {
    id: ID!
    key: String
    name: String!
}

interface Describable {
    description: String
}

interface Ownable {
    enterpriseId: ID!
}

interface Taggable {
    tags: [String]
}

# TODO replace hidden by available
interface Hidable {
    hidden: Boolean!
    showForCustomerCategories: [String]
    hideForCustomerCategories: [String]
}

scalar Date

schema {
    mutation: Mutation
    query: Query
}

# TODO
type Query {
    enterprise (id: String): Enterprise
    marketPlace: MarketPlace
}

# TODO
type Mutation {
    createShop (name: String) : Shop
    createProducer (name: String) : Shop
}

