@startuml

header
DRAFT
Authors: Olivier Wouters
Version: 0.11.0
endheader

legend right
    | Color | Type |
    |<#ff7f00>| A for Aggregate|
    |<#90ee90>| V for ValueObject|
endlegend

title Product context

namespace Main {
  
  class Address << (V,lightgreen) >> {
    street: String
    postCode: String
    locality: String
  }
  
  Address *-- AddressArea : country
  Address *-- AddressArea : administrativeLevel1
  Address *-- AddressArea : administrativeLevel2
  
  class AddressArea << (V,lightgreen) >> {
    code: String
    name: String
  }
  
  AddressArea::code *.. Area
  
  class Area << (A,orange) >> {
    type: AreaType
    code: String
    name: String
  }
  
  Area .[hidden]. AreaType
  
  enum AreaType {
      Country
  }
  
  class Location << (V,lightgreen) >> {
      latitude: Float
      longitude: Float
  }
  
  class Quantity << (V,lightgreen) >> {
    value: Float
  }
  
  Quantity *-- Unit : unit
  
  class Unit << (V,lightgreen) >> {
    code: String
    symbol: String
    name: String
  }
  
  namespace ActorService {
  
    class Actor << (A,orange) >> {
      id: Id
      key: String
      name: String
      images: [Image]
    }
    
    Actor *-- Main.Address : address
    Actor *-- Main.Location : location
    
    class Membership << (A,orange) >> {
      groupId: Id
      memberId: Id
    }
  
    Actor *..{ Membership : members
    Actor *..{ Membership : groups
  }
  
  namespace ClassificationService {
    
    class Classification << (A,orange) >> {
      type: String
      key: String
      name: String
    }
    
    class Category << (A,orange) >> {
      key: String
      name: String
      classificationKey: String
      hierarchyLevel: Int
      parentKey: String
    }
    
    Category::classificationKey *.. Classification
    Category *.. Category : parent-child
  }
  
   
  
  namespace ProductService {
  
    namespace Food {
    
      class ProductIngredient << (V,lightgreen) >> {
          name: String
          allergenCodes: [String]
      }
      
      ProductIngredient::allergenCodes *.. ProductAllergen
      
      class ProductAllergen << (V,lightgreen) >> {
        code: String
        name: String
      }
      
      ProductAllergen *-- ProductLevelOfContainment: level
      
      class ProductLevelOfContainment << (V,lightgreen) >> {
        "code": String
        "lessThanPercentage": Float
      }
      
      class ProductNutrientDailyValueIntakeReference {
        lifestage: PersonLifestage
      }
      
      ProductNutrientDailyValueIntakeReference *--{ ProductNutrientValue : nutrientValues
      
      class ProductNutrientReference {
        statement: String
      }
      
      ProductNutrientReference *-- Main.Quantity
      
      class ProductNutrientValue {
        key: String,
      }
      
      ProductNutrientValue *-- Main.Quantity
    
    }
  
    class Product << (A,orange) >> {
      id: Id
      familyId: Id
      gtin: String
      name: String
      description: String
      images: [Image]
      ingredientsStatement: String
      nutrientPerServingReference: ProductNutrientReference
      nutrientPerServingValues: [ProductNutrientValue]
    }
    
    Product *-left- ProductBrand : brand
    Product *-right-{ ProductContribution : contributions
    Product *-right-{ ProductCategory :  categories
    Product::familyId *.up. ProductFamily : family
    
    Product *-up-{ ProductPackaging : packagings
    Product *-left-{ ProductScoring : scorings
    
    Product *--{ Main.ProductService.Food.ProductIngredient : ingredients
    Product *--{ Main.ProductService.Food.ProductAllergen : allergens
    Product *--{ Main.ProductService.Food.ProductNutrientDailyValueIntakeReference : nutrientDailyValueIntakeReference
    Product *--{ Main.ProductService.Food.ProductNutrientReference : nutrientPerBaseReference
    Product *--{ Main.ProductService.Food.ProductNutrientValue : nutrientPerBaseValues
    
    class ProductBrand << (V,lightgreen) >> { 
      name: String
    }
    
    class ProductContribution << (V,lightgreen) >> {
        actorId: Id
        isMain: Boolean
    }
    
   ProductContribution::actorId *.. Main.ActorService.Actor : actor
    
    ProductContribution *--{ ProductContributionRole : roles
    
    enum ProductContributionRoleType {
      Producer
      Transformer
      Packer
    }
    
    class ProductContributionRole << (V,lightgreen) >> {
      type: ProductContributionRoleType
    }
    
    class ProductCategory << (V,lightgreen) >> {
      categoryKey: String
    }
  
    ProductCategory::categoryKey *.. Main.ClassificationService.Category
    
    
    class ProductPackaging << (V,lightgreen) >> {
      name: String
      shape: [ProductPackagingShape]
      recyclingSchemes: [ProductPackagingRecyclingScheme]
      recyclingProcessTypes: [ProductPackagingRecyclingProcessType]
      material: [ProductPackagingMaterial]
      functions: [ProductPackagingFunction]
    }
    
    class ProductScoring << (V,lightgreen) >> {
      
    }
    
    ProductScoring *-- ProductScoringRating : rating
    ProductScoring *-- ProductScoringMechanism : mechanism
    
    class ProductScoringRating << (V,lightgreen) >> {
      textValue: String
    }
    
    class ProductScoringMechanism << (V,lightgreen) >> {
      key: String
    }
    
    class ProductFamily << (A,orange) >> {
      name: String
      description: String
      images: [Image]
      categories: [ProductCategory]
      contributions: [ProductContribution]
      ingredients: [ProductIngredient]
    }
  }
  
}

@enduml
