@startuml

header
DRAFT
Authors: Olivier Wouters
Version: 0.4.0
endheader

legend right
    | Color | Type |
    |<#ff7f00>| A for Aggregate|
    |<#90ee90>| V for ValueObject|
    |<#ADD8E6>| U for Union|
endlegend

title Short food system context

namespace Main {
  
  class Address << (V,lightgreen) >> {
    street: String
    postCode: String
    locality: String
    country: AddressArea
    administrativeLevel1: AddressArea
    administrativeLevel2: AddressArea
  }
  
  Address *-- AddressArea : "areas"
  
  class AddressArea << (V,lightgreen) >> {
    code: String
    name: String
  }
  
  AddressArea::code *.. Area
  
  class Area << (A,orange) >> {
    type: AreaType
    code: String
    name: String
  }
  
  Area .[hidden]. AreaType
  
  enum AreaType {
      Country
  }
  
  class Location << (V,lightgreen) >> {
      type: String
      coordinates: [Float]
  }
  
  class Quantity << (V,lightgreen) >> {
    value: Float
  }
  
  Quantity *-- Unit : unit
  
  class Unit << (V,lightgreen) >> {
    code: String
    symbol: String
    name: String
  }
  
  class Price << (V,lightgreen) >> {
  }
  
  Price *-- Quantity : quantity
  Price *-- Money : money
  
  class Money << (V,lightgreen) >> {
    value: Float
  }
  
  Money *-- Currency : currency
  
  class Currency << (V,lightgreen) >> {
    code: String
    symbol: String
    name: String
  }
  
  class CommerceDocument << (A,orange) >> {
  }
  
  class CommerceDocumentParty << (V,lightgreen) >> {
    type: String
    name: String
    officialId: String
    address: Address
    location: Location
  }
  
  
  namespace ActorService {
  
    class Actor << (A,orange) >> {
      id: Id
      key: String
      name: String
      images: [Image]
      address: Address
      location: Location
    }
    
    class Membership << (A,orange) >> {
      groupId: Id
      memberId: Id
    }
  
    Actor *..{ Membership : members
    Actor *..{ Membership : groups
  }
  
  namespace ClassificationService {
    
    class Classification << (A,orange) >> {
      type: String
      key: String
      name: String
    }
    
    class Category << (A,orange) >> {
      key: String
      name: String
      classificationKey: String
      hierarchyLevel: Int
      parentKey: String
    }
    
    Category::classificationKey *.. Classification
    Category *.. Category : parent-child
  }
  
  namespace ProductService {
  
    namespace Food {
    
      class ProductIngredient << (V,lightgreen) >> {
          name: String
          allergenCodes: [String]
      }
      
      ProductIngredient::allergenCodes *.. ProductAllergen
      
      class ProductAllergen << (V,lightgreen) >> {
        code: String
        name: String
      }
      
      ProductAllergen *-- ProductLevelOfContainment: level
      
      class ProductLevelOfContainment << (V,lightgreen) >>
      {
        code: String
        lessThanPercentage: Float
      }
      
      class ProductNutrientDailyValueIntakeReference << (V,lightgreen) >> {
        lifestage: PersonLifestage
      }
      
      ProductNutrientDailyValueIntakeReference *--{ ProductNutrientValue : nutrientValues
      
      class ProductNutrientReference << (V,lightgreen) >> {
        statement: String
        quantity: Quantity
      }
      
      class ProductNutrientValue << (V,lightgreen) >> {
        key: String,
        quantity: Quantity
      }
    
    }
  
    class Product << (A,orange) >> {
      id: Id
      gtin: String
      name: String
      description: String
      images: [Image]
      ingredientsStatement: String
      nutrientPerServingReference: ProductNutrientReference
      nutrientPerServingValues: [ProductNutrientValue]
    }
    
    Product *-- ProductBrand : brand
    Product *-up-{ ProductContribution : contributions
    Product *--{ ProductCategory :  categories
    
    Product *--{ ProductPackaging : packagings
    Product *--{ ProductScoring : scorings
    
    Product *--{ Main.ProductService.Food.ProductIngredient : ingredients
    Product *--{ Main.ProductService.Food.ProductAllergen : allergens
    Product *--{ Main.ProductService.Food.ProductNutrientDailyValueIntakeReference : nutrientDailyValueIntakeReference
    Product *--{ Main.ProductService.Food.ProductNutrientReference : nutrientPerBaseReference
    Product *--{ Main.ProductService.Food.ProductNutrientValue : nutrientPerBaseValues
    
    class ProductBrand << (V,lightgreen) >> { 
      name: String
    }
    
    class ProductContribution << (V,lightgreen) >> {
        actorId: Id
        isMain: Boolean
    }
    
    ProductContribution::actorId *.. Main.ActorService.Actor : actor
    ProductContribution *--{ ProductContributionRole : roles
    
    enum ProductContributionRoleType {
      Producer
      Transformer
      Packer
    }
    
    class ProductContributionRole << (V,lightgreen) >> {
      type: ProductContributionRoleType
    }
    
    class ProductCategory << (V,lightgreen) >> {
      categoryKey: String
    }
  
    ProductCategory::categoryKey *.. Main.ClassificationService.Category
    
    
    class ProductPackaging << (V,lightgreen) >> {
      name: String
      shape: [ProductPackagingShape]
      recyclingSchemes: [ProductPackagingRecyclingScheme]
      recyclingProcessTypes: [ProductPackagingRecyclingProcessType]
      material: [ProductPackagingMaterial]
      functions: [ProductPackagingFunction]
    }
    
    class ProductScoring << (V,lightgreen) >> {
      
    }
    
    ProductScoring *-- ProductScoringRating : rating
    ProductScoring *-- ProductScoringMechanism : mechanism
    
    class ProductScoringRating << (V,lightgreen) >> {
      textValue: String
    }
    
    class ProductScoringMechanism << (V,lightgreen) >> {
      key: String
    }
    
    class ProductFamily << (A,orange) >> {
      name: String
      description: String
      images: [Image]
      actorId: ID
      categories: [ProductCategory]
      contributions: [ProductContribution]
      ingredients: [ProductIngredient]
    }
    
    ProductFamily *--{ Product
    
    class ProductAndFamilyUnion << (U,lightblue) >> {
    
    }
    
    ProductAndFamilyUnion *-- Product
    ProductAndFamilyUnion *-- ProductFamily
    
  }
  
  namespace InventoryService {
    class InventoryItem << (A,orange) >> {
      actorId: ID
      productId: ID
      productFamilyId: ID
      quantity: Quantity
    }
    
    InventoryItem *.. Main.ProductService.ProductAndFamilyUnion
  }
  
  namespace OfferService {
  
    class Offer << (A,orange) >> {
      actorId: ID
      productId: ID
      productFamilyId: ID
      inventoryId: ID
      price: Price
    }
    
    Offer *.. Main.ProductService.ProductAndFamilyUnion
    Offer *.. Main.InventoryService.InventoryItem
  
  }
  
  namespace CatalogService {
  
    class Catalog << (A,orange) >> {
      extends CommerceDocument
      --
      name: String
      description: String
      actorId: ID
    }
  
    class CatalogItem << (A,orange) >> {
      catalogId: ID
      productId: ID
      productFamilyId: ID
      offerId: ID
      inventoryId: ID
    }
    
    CatalogItem *.. Catalog
    CatalogItem *.. Main.ProductService.ProductAndFamilyUnion
    CatalogItem *.. Main.OfferService.Offer
    CatalogItem *.. Main.InventoryService.InventoryItem
  
  }
  
  namespace OrderService {  

    class Order << (A,orange) >> {
      extends CommerceDocument
      --
        id: ID
        key: String
        name: String
        status: String
        date: Date
        orderCycleId: ID
        buyer: OrderParty
        seller: OrderParty
        catalogIds: [Id]
    }
    
    Order *--{ OrderItem : items
    Order *-- OrderParty
    Order *-- OrderShippingMethod : shippingMethod
    Order *-- OrderPaymentMethod : paymentMethod
    Order *.. OrderCycle
    Order *..{ Main.CatalogService.Catalog

    class OrderItem << (V,lightgreen) >> {
        productId: ID
        productFamilyId: ID
        catalogItemId: ID
        offerId: ID
        inventoryItemId: ID
        name: String
        quantity: Quantity
    }
    
    OrderItem *.. Main.CatalogService.CatalogItem
    
    class OrderParty << (V,lightgreen) >> {
      extends CommerceDocumentParty
      --
      actorId: ID
      officialId: String
      bankAccountNumber: String
      shippingAddress: Address
      billingAddress: Address
    }
    
    class OrderShippingMethod << (V,lightgreen) >> {
        methodId: ID
        name: String
        description: String
    } 
    
    class OrderPaymentMethod << (V,lightgreen) >> {
        methodId: ID
        name: String
        description: String
    } 

    class OrderCycle << (A,orange) >> {
        id: ID
        key: String
        name: String
        status: String
        actorId: ID
        beginsAt: Date
        endsAt: Date
        inCatalogIds: [ID]
        outCatalogIds: [ID]
        schedules: [OrderCycleSchedule]
    }
    
    
    OrderCycle *.. Main.CatalogService.Catalog

    class OrderCycleSchedule << (A,orange) >> {
      TODO not very clear concept
      --
      id: ID
      key: String
      name: String
      actorId: ID
    }
    
    OrderCycleSchedule }..{ OrderCycle

    class Subscription << (A,orange) >> {
      schedule: OrderCycleSchedule
      status: String
      beginsAt: Date
      endsAt: Date
    }
    
    Subscription <|-- Order : extends 
    
  }
  
  namespace InvoiceService  {
  
    class Invoice << (A,orange) >> {
      extends CommerceDocument
      --
      buyer: InvoiceParty
      seller: InvoiceParty
      orderIds: [ID]
    }
    
    Invoice *-- InvoiceParty
    Invoice *-- InvoiceItem : items
    Invoice *..{ Main.OrderService.Order
    
    class InvoiceParty << (V,lightgreen) >> {
      extends CommerceDocumentParty
      --
      actorId: ID
      bankAccountNumber: String
    }
    
    class InvoiceItem << (V,lightgreen) >> {
      productId: ID
      productFamilyId: ID
      offerId: ID
      catalogItemId: ID
      quantity: Quantity
      price: Price
    }
    
    InvoiceItem *.. Main.OrderService.OrderItem
  
  }
  
  namespace ShippingService  {
  
    class Shipment << (A,orange) >> {
      orderIds: [ID]
    }
    
    Shipment *.. Main.OrderService.Order
    Shipment *-- ShipmentParty : sender
    Shipment *-- ShipmentParty : receiver
    Shipment *--{ ShipmentItem : items
    Shipment *..{ Parcel : parcels
    
    class ShipmentParty << (V,lightgreen) >> {
      extends CommerceDocumentParty
      --
      actorId: ID
    }
    
    class ShipmentItem << (V,lightgreen) >> {
      productId: ID
      productFamilyId: ID
      offerId: ID
      catalogItemId: ID
      inventoryItemId: ID
      quantity: Quantity
    }
    
    ShipmentItem *.. Main.OrderService.OrderItem
    
    class Parcel << (A,orange) >> {
    }
    
    Parcel --|> Package : extends
    Parcel --|> Shipment : extends
    
    class Package << (A,orange) >> {
    }
    
    Package *-- PackageItems : items
    Package *-- Container : containers
    
    class PackageItems << (V,lightgreen) >> {
      productId: ID
      productFamilyId: ID
      quantity: Quantity
    }
    
    class Container {
    }
    
    
  
  }
  
}

@enduml
